<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 10">
  <defs>
    <text class="ticker-text" y="2" id="ts-code">

        <tspan class="c2">interface </tspan>

        <tspan class="c0">State</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c1">title</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">animating</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">boolean</tspan>

        <tspan class="c5">} </tspan>

        <tspan class="c2">interface </tspan>

        <tspan class="c0">Props</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c1">title</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">action</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">Function</tspan>

        <tspan class="c5">} </tspan>

        <tspan class="c4">export </tspan>

        <tspan class="c4">default </tspan>

        <tspan class="c2">class </tspan>

        <tspan class="c0">QLButton </tspan>

        <tspan class="c2">extends </tspan>

        <tspan class="c0">React</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c0">Component</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Props</tspan>

        <tspan class="c5">&gt; {</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">State</tspan>

        <tspan class="c5">; </tspan>

        <tspan class="c1">animationRef</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">React</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c0">RefObject</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">HTMLElement</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c2">constructor</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">props</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">Props</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c2">super</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">props</tspan>

        <tspan class="c5">); </tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animationRef</tspan>

        <tspan class="c5">= </tspan>

        <tspan class="c0">React</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">createRef</tspan>

        <tspan class="c5">(); </tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">= {</tspan>

        <tspan class="c1">title:</tspan>

        <tspan class="c1">props</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">title</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">animating:</tspan>

        <tspan class="c2">false</tspan>

        <tspan class="c5">}} </tspan>

        <tspan class="c8">render</tspan>

        <tspan class="c5">(): </tspan>

        <tspan class="c0">React</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c0">ReactElement</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c9">&lt;&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c2">button</tspan>

        <tspan class="c1">onClick</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c2">{this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">onClick</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c1">class Name</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c6">&quot;ql-btn clickable&quot;</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c0">When</tspan>

        <tspan class="c1">condition</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c2">{this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animating</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c2">div</tspan>

        <tspan class="c1">class Name</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c6">&quot;ql-typing-text&quot;</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c2">{</tspan>

        <tspan class="c6">&quot;exec tree ./&quot;</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c2">span</tspan>

        <tspan class="c1">class Name</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c6">&quot;ql-cursor&quot;</tspan>

        <tspan class="c1">ref</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c2">{this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animationRef</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c9">/&gt;</tspan>

        <tspan class="c9">&lt;/</tspan>

        <tspan class="c2">div</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;/</tspan>

        <tspan class="c0">When</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c2">div</tspan>

        <tspan class="c1">class Name</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c6">&quot;ql-title-text&quot;</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c2">{this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">title</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c9">&lt;/</tspan>

        <tspan class="c2">div</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c0">When</tspan>

        <tspan class="c1">condition</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c2">{</tspan>

        <tspan class="c5">!</tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animating</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c2">div</tspan>

        <tspan class="c1">class Name</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c6">&quot;ql-btn-icon&quot;</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;</tspan>

        <tspan class="c0">FontAwesomeIcon</tspan>

        <tspan class="c1">icon</tspan>

        <tspan class="c5">=</tspan>

        <tspan class="c2">{</tspan>

        <tspan class="c7">faChevronDown</tspan>

        <tspan class="c2">}</tspan>

        <tspan class="c9">/&gt;</tspan>

        <tspan class="c9">&lt;/</tspan>

        <tspan class="c2">div</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;/</tspan>

        <tspan class="c0">When</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;/</tspan>

        <tspan class="c2">button</tspan>

        <tspan class="c9">&gt;</tspan>

        <tspan class="c9">&lt;/&gt;</tspan>

        <tspan class="c5">} </tspan>

        <tspan class="c2">private</tspan>

        <tspan class="c8">onClick</tspan>

        <tspan class="c5">= (): </tspan>

        <tspan class="c0">void</tspan>

        <tspan class="c2">=&gt;</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animating</tspan>

        <tspan class="c5">) </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c5">; </tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">setState</tspan>

        <tspan class="c5">({</tspan>

        <tspan class="c1">animating:</tspan>

        <tspan class="c5">!</tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">state</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animating</tspan>

        <tspan class="c5">}, </tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">openQuicklinks</tspan>

        <tspan class="c5">);} </tspan>

        <tspan class="c2">private</tspan>

        <tspan class="c8">openQuicklinks</tspan>

        <tspan class="c5">= (): </tspan>

        <tspan class="c0">void</tspan>

        <tspan class="c2">=&gt;</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c8">anime</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">timeline</tspan>

        <tspan class="c5">() .</tspan>

        <tspan class="c8">add</tspan>

        <tspan class="c5">({</tspan>

        <tspan class="c1">targets:</tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animationRef</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c7">current</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">translate X:</tspan>

        <tspan class="c5">[...</tspan>

        <tspan class="c0">Array</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c3">9</tspan>

        <tspan class="c5">)].</tspan>

        <tspan class="c8">map</tspan>

        <tspan class="c5">((</tspan>

        <tspan class="c1">_</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">i</tspan>

        <tspan class="c5">) </tspan>

        <tspan class="c2">=&gt;</tspan>

        <tspan class="c5">({</tspan>

        <tspan class="c1">value:</tspan>

        <tspan class="c5">((</tspan>

        <tspan class="c1">i</tspan>

        <tspan class="c5">+ </tspan>

        <tspan class="c3">1</tspan>

        <tspan class="c5">) * </tspan>

        <tspan class="c3">0.57</tspan>

        <tspan class="c5">) + </tspan>

        <tspan class="c6">&quot;em&quot;</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">duration:</tspan>

        <tspan class="c3">100</tspan>

        <tspan class="c5">,})), </tspan>

        <tspan class="c1">easing:</tspan>

        <tspan class="c6">&quot;easeInOutBack&quot;</tspan>

        <tspan class="c5">,}) .</tspan>

        <tspan class="c8">add</tspan>

        <tspan class="c5">({</tspan>

        <tspan class="c1">targets:</tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">animationRef</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c7">current</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">duration:</tspan>

        <tspan class="c3">700</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c1">opacity:</tspan>

        <tspan class="c5">[ {</tspan>

        <tspan class="c1">value:</tspan>

        <tspan class="c5">[</tspan>

        <tspan class="c3">1</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c3">1</tspan>

        <tspan class="c5">]}, {</tspan>

        <tspan class="c1">value:</tspan>

        <tspan class="c5">[</tspan>

        <tspan class="c3">0</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c3">0</tspan>

        <tspan class="c5">]}, {</tspan>

        <tspan class="c1">value:</tspan>

        <tspan class="c5">[</tspan>

        <tspan class="c3">1</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c3">1</tspan>

        <tspan class="c5">]}, {</tspan>

        <tspan class="c1">value:</tspan>

        <tspan class="c5">[</tspan>

        <tspan class="c3">0</tspan>

        <tspan class="c5">, </tspan>

        <tspan class="c3">0</tspan>

        <tspan class="c5">]} ],}).</tspan>

        <tspan class="c1">finished</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">then</tspan>

        <tspan class="c5">(() </tspan>

        <tspan class="c2">=&gt;</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">this</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c7">props</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c8">action</tspan>

        <tspan class="c5">();})}}</tspan>

      </text>
    <text class="ticker-text" y="2" id="go-code">

        <tspan class="c0">Client </tspan>

        

        <tspan class="c8">struct</tspan>

        <tspan class="c1">{IPAddress </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">Username </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">Expiration time.Time}</tspan>

        <tspan class="c8">func </tspan>

        <tspan class="c1">(c Client) </tspan>

        <tspan class="c4">String </tspan>

        <tspan class="c1">() </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">{</tspan>

        <tspan class="c6">return </tspan>

        <tspan class="c1">fmt.</tspan>

        <tspan class="c4">Sprintf</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;[</tspan>

        <tspan class="c11 c5">%s</tspan>

        <tspan class="c6">, </tspan>

        <tspan class="c11 c5">%s</tspan>

        <tspan class="c6">]&quot;</tspan>

        <tspan class="c1">, c.IPAddress, c.Username)} </tspan>

        <tspan class="c8">var </tspan>

        

        <tspan class="c11 c5">tokens </tspan>

        

        <tspan class="c8">map</tspan>

        <tspan class="c1">[</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">]*Client </tspan>

        <tspan class="c8">var </tspan>

        

        <tspan class="c11 c5">user_to_token </tspan>

        

        <tspan class="c8">map</tspan>

        <tspan class="c1">[</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">]</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">InitializeTokenMap</tspan>

        <tspan class="c1">() {</tspan>

        <tspan class="c4">configLogger</tspan>

        <tspan class="c1">() </tspan>

        <tspan class="c11 c5">tokens </tspan>

        <tspan class="c1">= </tspan>

        <tspan class="c4">make</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c8">map</tspan>

        <tspan class="c1">[</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">]*Client) </tspan>

        <tspan class="c11 c5">user_to_token </tspan>

        <tspan class="c1">= </tspan>

        <tspan class="c4">make</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c8">map</tspan>

        <tspan class="c1">[</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">]</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">)} </tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">AddClient</tspan>

        <tspan class="c1">(ip </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">, username </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">{</tspan>

        <tspan class="c11 c5">ret</tspan>

        <tspan class="c1">:= uuid.</tspan>

        <tspan class="c4">New</tspan>

        <tspan class="c1">().</tspan>

        <tspan class="c4">String </tspan>

        <tspan class="c1">()</tspan>

        <tspan class="c6">if </tspan>

        

        <tspan class="c11 c5">_</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">ok</tspan>

        <tspan class="c1">:= user_to_token [username]; ok {</tspan>

        <tspan class="c4">delete</tspan>

        <tspan class="c1">(tokens , user_to_token [username]) </tspan>

        <tspan class="c4">delete</tspan>

        <tspan class="c1">(user_to_token , username)log.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;refreshing a users token&quot;</tspan>

        <tspan class="c1">)}tokens [ret] = &amp;Client{IPAddress:ip,Username:username,Expiration: time.</tspan>

        <tspan class="c4">Now</tspan>

        <tspan class="c1">().</tspan>

        <tspan class="c4">Add</tspan>

        <tspan class="c1">(time.Hour * </tspan>

        <tspan class="c14 c5">6</tspan>

        <tspan class="c1">),}user_to_token [username] = retlog.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;tokens :&quot;</tspan>

        <tspan class="c1">, tokens ) </tspan>

        <tspan class="c6">return </tspan>

        <tspan class="c1">ret} </tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">ValidateHeaders</tspan>

        <tspan class="c1">(c *gin.Context, args ...</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c0">bool</tspan>

        <tspan class="c1">{</tspan>

        <tspan class="c6">for</tspan>

        

        <tspan class="c11 c5">_</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">v</tspan>

        <tspan class="c1">:= </tspan>

        <tspan class="c6">range</tspan>

        <tspan class="c1">args {</tspan>

        <tspan class="c6">if </tspan>

        <tspan class="c1">c.</tspan>

        <tspan class="c4">GetHeader</tspan>

        <tspan class="c1">(v) == </tspan>

        <tspan class="c6">&quot;&quot;</tspan>

        <tspan class="c1">{log.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;invalid or missing headers&quot;</tspan>

        <tspan class="c1">)c.</tspan>

        <tspan class="c4">AbortWithStatus</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c14 c5">400</tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">false</tspan>

        <tspan class="c1">}} </tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">true</tspan>

        <tspan class="c1">} </tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">ValidateAuthentication</tspan>

        <tspan class="c1">(c *gin.Context) (</tspan>

        <tspan class="c0">bool</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c0">error</tspan>

        <tspan class="c1">) {</tspan>

        <tspan class="c8">var </tspan>

        

        <tspan class="c11 c5">err</tspan>

        

        <tspan class="c0">error </tspan>

        <tspan class="c6">if </tspan>

        <tspan class="c1">!</tspan>

        <tspan class="c4">ValidateHeaders</tspan>

        <tspan class="c1">(c, </tspan>

        <tspan class="c6">&quot;Token&quot;</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c6">&quot;Username&quot;</tspan>

        <tspan class="c1">) {</tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">false</tspan>

        <tspan class="c1">, err} </tspan>

        <tspan class="c11 c5">token</tspan>

        <tspan class="c1">:= c.</tspan>

        <tspan class="c4">GetHeader</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;Token&quot;</tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c11 c5">username</tspan>

        <tspan class="c1">:= c.</tspan>

        <tspan class="c4">GetHeader</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;Username&quot;</tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c6">if </tspan>

        

        <tspan class="c11 c5">ok</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">err</tspan>

        <tspan class="c1">:= </tspan>

        <tspan class="c4">ValidateUserPassRegex</tspan>

        <tspan class="c1">(c, username, </tspan>

        <tspan class="c6">&quot;&quot;</tspan>

        <tspan class="c1">); !ok {</tspan>

        <tspan class="c6">return </tspan>

        <tspan class="c1">!ok, err} </tspan>

        <tspan class="c6">if </tspan>

        

        <tspan class="c11 c5">ok</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">err</tspan>

        <tspan class="c1">:= bsql.</tspan>

        <tspan class="c4">UserExists</tspan>

        <tspan class="c1">(username); !ok {c.</tspan>

        <tspan class="c4">AbortWithStatus</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c14 c5">404</tspan>

        <tspan class="c1">)</tspan>

        <tspan class="c6">return </tspan>

        <tspan class="c1">!ok, err}</tspan>

        <tspan class="c6">if </tspan>

        

        <tspan class="c11 c5">_</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">ok</tspan>

        <tspan class="c1">:= tokens [token]; !ok {log.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;invalid token&quot;</tspan>

        <tspan class="c1">)c.</tspan>

        <tspan class="c4">AbortWithStatus</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c14 c5">401</tspan>

        <tspan class="c1">)</tspan>

        <tspan class="c6">return </tspan>

        <tspan class="c1">!ok, err}</tspan>

        <tspan class="c11 c5">client</tspan>

        <tspan class="c1">:= tokens [token] </tspan>

        <tspan class="c6">if </tspan>

        <tspan class="c1">!client.Expiration.</tspan>

        <tspan class="c4">After</tspan>

        <tspan class="c1">(time.</tspan>

        <tspan class="c4">Now</tspan>

        <tspan class="c1">()) ||client.Username != username ||client.IPAddress != c.</tspan>

        <tspan class="c4">ClientIP</tspan>

        <tspan class="c1">() {log.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;compromised, expired or invalid&quot;</tspan>

        <tspan class="c1">)</tspan>

        <tspan class="c4">delete</tspan>

        <tspan class="c1">(tokens , token)c.</tspan>

        <tspan class="c4">AbortWithStatus</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c14 c5">401</tspan>

        <tspan class="c1">)</tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">false</tspan>

        <tspan class="c1">, err}</tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">true</tspan>

        <tspan class="c1">, err}</tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">ValidateCoinRequest</tspan>

        <tspan class="c1">(c *gin.Context, user </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">, id </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">) (</tspan>

        <tspan class="c0">bool</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c0">error</tspan>

        <tspan class="c1">) {</tspan>

        <tspan class="c11 c5">err</tspan>

        <tspan class="c1">:= bsql.</tspan>

        <tspan class="c4">SelectCoinHolder</tspan>

        <tspan class="c1">(user, id)</tspan>

        <tspan class="c6">if </tspan>

        <tspan class="c1">err != </tspan>

        <tspan class="c8">nil</tspan>

        <tspan class="c1">{</tspan>

        <tspan class="c6">if </tspan>

        <tspan class="c1">err == sql.ErrNoRows {</tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">false</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c8">nil</tspan>

        <tspan class="c1">}}</tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">true</tspan>

        <tspan class="c1">, err}</tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">ValidateUserPassRegex</tspan>

        <tspan class="c1">(c *gin.Context, username </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">, password </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c1">) (</tspan>

        <tspan class="c0">bool</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c0">error</tspan>

        <tspan class="c1">) {</tspan>

        <tspan class="c6">if </tspan>

        

        <tspan class="c11 c5">regex</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">err</tspan>

        <tspan class="c1">:= regexp.</tspan>

        <tspan class="c4">Compile</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;[^A-Za-z0-9]+&quot;</tspan>

        <tspan class="c1">); regex.</tspan>

        <tspan class="c4">MatchString </tspan>

        <tspan class="c1">(username) {log.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;username does not follow guidelines&quot;</tspan>

        <tspan class="c1">)c.</tspan>

        <tspan class="c4">AbortWithStatus</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c14 c5">400</tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">false</tspan>

        <tspan class="c1">, err}</tspan>

        <tspan class="c6">if </tspan>

        <tspan class="c1">password != </tspan>

        <tspan class="c6">&quot;&quot; </tspan>

        <tspan class="c1">{</tspan>

        <tspan class="c6">if </tspan>

        

        <tspan class="c11 c5">regex</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c11 c5">err</tspan>

        <tspan class="c1">:= regexp.</tspan>

        <tspan class="c4">Compile</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;</tspan>

        <tspan class="c5 c18">\\</tspan>

        <tspan class="c6">s+&quot;</tspan>

        <tspan class="c1">); regex.</tspan>

        <tspan class="c4">MatchString </tspan>

        <tspan class="c1">(password) {log.</tspan>

        <tspan class="c4">Println</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;password does not follow guidelines&quot;</tspan>

        <tspan class="c1">) c.</tspan>

        <tspan class="c4">AbortWithStatus</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c14 c5">400</tspan>

        <tspan class="c1">) </tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">false</tspan>

        <tspan class="c1">, err}}</tspan>

        <tspan class="c6">return </tspan>

        

        <tspan class="c8">true</tspan>

        <tspan class="c1">, </tspan>

        <tspan class="c8">nil</tspan>

        <tspan class="c1">} </tspan>

        <tspan class="c8">func </tspan>

        

        <tspan class="c4">configLogger</tspan>

        <tspan class="c1">() {log.</tspan>

        <tspan class="c4">SetPrefix</tspan>

        <tspan class="c1">(</tspan>

        <tspan class="c6">&quot;[bres] &quot;</tspan>

        <tspan class="c1">)log.</tspan>

        <tspan class="c4">SetFlags</tspan>

        <tspan class="c1">(log.Lmsgprefix)}</tspan>

      </text>
    <text class="ticker-text" y="2" id="dart-code">

        <tspan class="c0">API</tspan>

        <tspan class="c0">{</tspan>

        <tspan class="c2">static </tspan>

        

        <tspan class="c2">late </tspan>

        

        <tspan class="c0">String </tspan>

        <tspan class="c0">token; </tspan>

        <tspan class="c2">static </tspan>

        

        <tspan class="c2">late </tspan>

        

        <tspan class="c0">String </tspan>

        <tspan class="c5">username; </tspan>

        <tspan class="c2">static </tspan>

        

        <tspan class="c0">List</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Group</tspan>

        <tspan class="c5">&gt; groups = </tspan>

        <tspan class="c0">List</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">empty</tspan>

        <tspan class="c5">(growable: </tspan>

        <tspan class="c2">true</tspan>

        <tspan class="c5">); </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c2">late </tspan>

        <tspan class="c0">Stream</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">List</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Group</tspan>

        <tspan class="c5">&gt;&gt; streamGroups; </tspan>

        

        <tspan class="c2">static </tspan>

        <tspan class="c0">StreamBuilder</tspan>

        <tspan class="c1">builder</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">Function</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">List</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Group</tspan>

        <tspan class="c5">&gt; groups) func ) {</tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c0">StreamBuilder</tspan>

        <tspan class="c5">( initialData: groups, stream: streamGroups, builder: (_, snap) { </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c1">func </tspan>

        <tspan class="c5">(snap.data </tspan>

        <tspan class="c2">as</tspan>

        <tspan class="c0">List</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Group</tspan>

        <tspan class="c5">&gt;);}, );} </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Status</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">initialize</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c5">String </tspan>

        <tspan class="c5">username, </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">password) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">try</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">token = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c0">_Post</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">_login</tspan>

        <tspan class="c5">(username, password); </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.token = token; </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.username = username; streamGroups = (() </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">* { </tspan>

        <tspan class="c4">while</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c2">true</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">g = </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.groups; </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">delayed</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c2">const</tspan>

        <tspan class="c0">Duration</tspan>

        <tspan class="c5">(milliseconds: </tspan>

        <tspan class="c10 c14">500</tspan>

        <tspan class="c5">)); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(g != </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.groups) {</tspan>

        <tspan class="c4">yield</tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.groups;} }})().</tspan>

        <tspan class="c1">asBroadcastStream</tspan>

        <tspan class="c5">(); </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c0">Status</tspan>

        <tspan class="c5">.ok;} </tspan>

        <tspan class="c4">on</tspan>

        <tspan class="c0">Exception</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">rethrow</tspan>

        <tspan class="c5">;}} </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c0">&gt; </tspan>

        <tspan class="c1">logout</tspan>

        <tspan class="c0">() </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c0">{</tspan>

        <tspan class="c0">SharedPreferences</tspan>

        <tspan class="c5">prefs = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c0">SharedPreferences</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">getInstance</tspan>

        <tspan class="c5">(); prefs.</tspan>

        <tspan class="c1">remove</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;puapp_username&quot;</tspan>

        <tspan class="c5">); prefs.</tspan>

        <tspan class="c1">remove</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;puapp_password&quot;</tspan>

        <tspan class="c5">); token = </tspan>

        <tspan class="c9">&quot;&quot;</tspan>

        <tspan class="c5">; username = </tspan>

        <tspan class="c9">&quot;&quot;</tspan>

        <tspan class="c5">; groups = </tspan>

        <tspan class="c0">List</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">empty</tspan>

        <tspan class="c5">(growable: </tspan>

        <tspan class="c2">true</tspan>

        <tspan class="c5">);} </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Status</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">newUser</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">username, </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">password) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">try</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c0">_Post</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">_register</tspan>

        <tspan class="c5">(username, password); </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c0">Status</tspan>

        <tspan class="c5">.ok;} </tspan>

        <tspan class="c4">on</tspan>

        <tspan class="c0">Exception</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c4">rethrow</tspan>

        <tspan class="c5">;}} </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">_Post</tspan>

        <tspan class="c1">post</tspan>

        <tspan class="c5">() =&gt; </tspan>

        <tspan class="c0">_Post</tspan>

        <tspan class="c5">(); </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">_Del</tspan>

        <tspan class="c1">del</tspan>

        <tspan class="c5">() =&gt; </tspan>

        <tspan class="c0">_Del</tspan>

        <tspan class="c5">(); </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">_Get</tspan>

        <tspan class="c2">get</tspan>

        <tspan class="c5">() =&gt; </tspan>

        <tspan class="c0">_Get</tspan>

        <tspan class="c5">();} </tspan>

        

        <tspan class="c2">class </tspan>

        <tspan class="c0">_Post</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">_login</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">username, </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">password) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c1">post</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;client/login&quot;</tspan>

        <tspan class="c5">), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c5">: username, </tspan>

        <tspan class="c9">&quot;Password&quot;</tspan>

        <tspan class="c5">: password})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">201</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);} </tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">body = json.</tspan>

        <tspan class="c1">decode</tspan>

        <tspan class="c5">(res.body); </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c5">body[</tspan>

        <tspan class="c9">&quot;token&quot;</tspan>

        <tspan class="c5">];} </tspan>

        <tspan class="c2">static </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">_register</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">username, </tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">password) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c1">post</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;client/register&quot;</tspan>

        <tspan class="c5">), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c5">: username, </tspan>

        <tspan class="c9">&quot;Password&quot;</tspan>

        <tspan class="c5">: password})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">201</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);}} </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">create</tspan>

        <tspan class="c5">() </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c1">post</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;group/create&quot;</tspan>

        <tspan class="c5">), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.username, </tspan>

        <tspan class="c9">&quot;Token&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.token})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">200</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);}} </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">join</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c5">id) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c1">post</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;group/join&quot;</tspan>

        <tspan class="c5">), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.username, </tspan>

        <tspan class="c9">&quot;Token&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.token, </tspan>

        <tspan class="c9">&quot;ID&quot;</tspan>

        <tspan class="c5">: id})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">200</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);}} </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">coin</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c0">id) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c0">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c0">res = </tspan>

        <tspan class="c4">await</tspan>

        

        <tspan class="c1">post</tspan>

        <tspan class="c0">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c0">(</tspan>

        <tspan class="c9">&quot;group/coin&quot;</tspan>

        <tspan class="c0">), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c0">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.username, </tspan>

        <tspan class="c9">&quot;Token&quot;</tspan>

        <tspan class="c0">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.token, </tspan>

        <tspan class="c9">&quot;ID&quot;</tspan>

        <tspan class="c0">: id})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c0">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c0">(res.statusCode != </tspan>

        <tspan class="c10 c14">201</tspan>

        <tspan class="c0">) {</tspan>

        <tspan class="c4">throw</tspan>

        

        <tspan class="c0">HttpException</tspan>

        <tspan class="c0">(res.statusCode);}}} </tspan>

        

        <tspan class="c2">class </tspan>

        

        <tspan class="c0">_Del</tspan>

        <tspan class="c0">{</tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c0">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c0">&gt; </tspan>

        <tspan class="c1">disband</tspan>

        <tspan class="c0">() </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c0">{</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c0">id = </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.groups .</tspan>

        <tspan class="c1">where</tspan>

        <tspan class="c0">((group) =&gt; group.creator == </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.username) .first .id; </tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c0">res = </tspan>

        <tspan class="c4">await</tspan>

        

        <tspan class="c1">delete</tspan>

        <tspan class="c0">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c0">(</tspan>

        <tspan class="c9">&quot;group/disband&quot;</tspan>

        <tspan class="c0">), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c0">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.username, </tspan>

        <tspan class="c9">&quot;Token&quot;</tspan>

        <tspan class="c0">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.token, </tspan>

        <tspan class="c9">&quot;ID&quot;</tspan>

        <tspan class="c0">: id})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c0">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c0">(res.statusCode != </tspan>

        <tspan class="c10 c14">200</tspan>

        <tspan class="c0">) {</tspan>

        <tspan class="c4">throw</tspan>

        

        <tspan class="c0">HttpException</tspan>

        <tspan class="c0">(res.statusCode);} </tspan>

        <tspan class="c4">await</tspan>

        

        <tspan class="c0">API</tspan>

        <tspan class="c0">.</tspan>

        <tspan class="c2">get</tspan>

        <tspan class="c0">().</tspan>

        <tspan class="c1">groups</tspan>

        <tspan class="c0">();} </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c0">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c0">&gt; </tspan>

        <tspan class="c1">kick</tspan>

        <tspan class="c0">(</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c0">user) </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c0">{</tspan>

        <tspan class="c0">String </tspan>

        <tspan class="c0">id = </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.groups .</tspan>

        <tspan class="c1">where</tspan>

        <tspan class="c0">((group) =&gt; </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c0">.username == group.creator) .first .id; </tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c0">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c1">delete</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;group/kick/&quot;</tspan>

        <tspan class="c5">+ user), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.username, </tspan>

        <tspan class="c9">&quot;Token&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.token, </tspan>

        <tspan class="c9">&quot;ID&quot;</tspan>

        <tspan class="c5">: id})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">200</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);}}} </tspan>

        <tspan class="c2">class </tspan>

        <tspan class="c0">_Get</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c2">void</tspan>

        <tspan class="c5">&gt; </tspan>

        <tspan class="c1">healthCheck</tspan>

        <tspan class="c5">() </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c2">get</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;healthcheck&quot;</tspan>

        <tspan class="c5">), headers: {</tspan>

        <tspan class="c9">&quot;Accept&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c9">&quot;application/json&quot;</tspan>

        <tspan class="c5">}) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">200</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);}} </tspan>

        <tspan class="c0">Future</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Status</tspan>

        <tspan class="c5">?&gt; </tspan>

        <tspan class="c1">groups</tspan>

        <tspan class="c5">() </tspan>

        <tspan class="c4">async</tspan>

        <tspan class="c5">{</tspan>

        <tspan class="c2">var </tspan>

        <tspan class="c5">res = </tspan>

        <tspan class="c4">await</tspan>

        <tspan class="c2">get</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c1">_parseUri</tspan>

        <tspan class="c5">(</tspan>

        <tspan class="c9">&quot;group/&quot;</tspan>

        <tspan class="c5">+ </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.username), headers: ({</tspan>

        <tspan class="c9">&quot;Username&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.username, </tspan>

        <tspan class="c9">&quot;Token&quot;</tspan>

        <tspan class="c5">: </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.token})) .</tspan>

        <tspan class="c1">catchError</tspan>

        <tspan class="c5">((err) =&gt; </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c5">err); </tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode != </tspan>

        <tspan class="c10 c14">200</tspan>

        <tspan class="c5">) {</tspan>

        <tspan class="c4">if </tspan>

        <tspan class="c5">(res.statusCode == </tspan>

        <tspan class="c10 c14">404</tspan>

        <tspan class="c5">) { </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode).status;} </tspan>

        <tspan class="c4">throw</tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode);} </tspan>

        <tspan class="c0">API</tspan>

        <tspan class="c5">.groups = </tspan>

        <tspan class="c0">List</tspan>

        <tspan class="c5">&lt;</tspan>

        <tspan class="c0">Group</tspan>

        <tspan class="c5">&gt;.</tspan>

        <tspan class="c1">from</tspan>

        <tspan class="c5">( json.</tspan>

        <tspan class="c1">decode</tspan>

        <tspan class="c5">(res.body).</tspan>

        <tspan class="c1">map</tspan>

        <tspan class="c5">((x) =&gt; </tspan>

        <tspan class="c0">Group</tspan>

        <tspan class="c5">.</tspan>

        <tspan class="c1">fromJson</tspan>

        <tspan class="c5">(x))); </tspan>

        <tspan class="c4">return </tspan>

        <tspan class="c0">HttpException</tspan>

        <tspan class="c5">(res.statusCode).status;}} </tspan>

      </text>
    <style>
      .ticker-text{font-size:0;font-family:&quot;Consolas&quot;}tspan{font-size:1px}.c0{fill:#4ec9b0}.c1{fill:#9cdcfe}.c3{fill:#b5cea8}.c9{fill:gray}.c8{fill:#dcdcaa}.c2{fill:#569cd6}.c5{fill:#d4d4d4}.c4{fill:#c586c0}.c7{fill:#4fc1ff}.c6{fill:#ce9178}
    </style>
  </defs>

  <use href="#ts-code">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="0" to="716" dur="0.5h" repeatCount="indefinite"/>
  </use>

  <use href="#ts-code">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="-716" to="0" dur="0.5h" repeatCount="indefinite"/>
  </use>
  <use href="#go-code" y="2">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="0" to="-1316" dur="0.75h" repeatCount="indefinite"/>
  </use>

  <use href="#go-code" y="2">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="1316" to="0" dur="0.75h" repeatCount="indefinite"/>
  </use>

  <use href="#dart-code" y="4">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="0" to="2176" dur="1h" repeatCount="indefinite"/>
  </use>

  <use href="#dart-code" y="4">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="-2176" to="0" dur="1h" repeatCount="indefinite"/>
  </use>

  <use href="#ts-code" y="6">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="0" to="-716" dur="0.5h" repeatCount="indefinite"/>
  </use>

  <use href="#ts-code" y="6">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="716" to="0" dur="0.5h" repeatCount="indefinite"/>
  </use>

  <use href="#go-code" y="8">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="0" to="1316" dur="1h" repeatCount="indefinite"/>
  </use>

  <use href="#go-code" y="8">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="-1316" to="0" dur="1h" repeatCount="indefinite"/>
  </use>

  <use href="#dart-code" y="10">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="0" to="-2176" dur="1h" repeatCount="indefinite"/>
  </use>

  <use href="#dart-code" y="10">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" from="2176" to="0" dur="1h" repeatCount="indefinite"/>
  </use>
  
</svg>
